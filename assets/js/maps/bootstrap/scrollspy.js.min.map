{"version":3,"sources":["bootstrap/scrollspy.js"],"names":["$","$body","document","body","this","$scrollElement","element","is","options","extend","ScrollSpy","DEFAULTS","window","selector","target","offsets","targets","activeTarget","scrollHeight","refresh","on","proxy","process","Plugin","option","fn","scrollspy","each","noConflict","old","data","$this","VERSION","offset","prototype","Math","max","documentElement","that","offsetMethod","offsetBase","getScrollHeight","scrollTop","find","href","$el","map","$href","length","attr","test","push","top","sort","a","b","i","maxScroll","height","clear","activate","undefined","active","closest","parents","addClass","parent","trigger","parentsUntil","$spy","Constructor","call","jQuery"],"mappings":"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","file":"../../bootstrap/scrollspy.js","sourcesContent":["/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.7\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body          = $(document.body)\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\n    this.selector       = (this.options.target || '') + ' .nav li > a'\n    this.offsets        = []\n    this.targets        = []\n    this.activeTarget   = null\n    this.scrollHeight   = 0\n\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\n    this.refresh()\n    this.process()\n  }\n\n  ScrollSpy.VERSION  = '3.3.7'\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  }\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n  }\n\n  ScrollSpy.prototype.refresh = function () {\n    var that          = this\n    var offsetMethod  = 'offset'\n    var offsetBase    = 0\n\n    this.offsets      = []\n    this.targets      = []\n    this.scrollHeight = this.getScrollHeight()\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position'\n      offsetBase   = this.$scrollElement.scrollTop()\n    }\n\n    this.$body\n      .find(this.selector)\n      .map(function () {\n        var $el   = $(this)\n        var href  = $el.data('target') || $el.attr('href')\n        var $href = /^#./.test(href) && $(href)\n\n        return ($href\n          && $href.length\n          && $href.is(':visible')\n          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n      })\n      .sort(function (a, b) { return a[0] - b[0] })\n      .each(function () {\n        that.offsets.push(this[0])\n        that.targets.push(this[1])\n      })\n  }\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n    var scrollHeight = this.getScrollHeight()\n    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n    var offsets      = this.offsets\n    var targets      = this.targets\n    var activeTarget = this.activeTarget\n    var i\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh()\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null\n      return this.clear()\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i]\n        && scrollTop >= offsets[i]\n        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n        && this.activate(targets[i])\n    }\n  }\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target\n\n    this.clear()\n\n    var selector = this.selector +\n      '[data-target=\"' + target + '\"],' +\n      this.selector + '[href=\"' + target + '\"]'\n\n    var active = $(selector)\n      .parents('li')\n      .addClass('active')\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active\n        .closest('li.dropdown')\n        .addClass('active')\n    }\n\n    active.trigger('activate.bs.scrollspy')\n  }\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector)\n      .parentsUntil(this.options.target, '.active')\n      .removeClass('active')\n  }\n\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.scrollspy')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.scrollspy\n\n  $.fn.scrollspy             = Plugin\n  $.fn.scrollspy.Constructor = ScrollSpy\n\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old\n    return this\n  }\n\n\n  // SCROLLSPY DATA-API\n  // ==================\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      Plugin.call($spy, $spy.data())\n    })\n  })\n\n}(jQuery);\n"]}