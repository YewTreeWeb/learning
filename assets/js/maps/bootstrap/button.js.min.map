{"version":3,"sources":["bootstrap/button.js"],"names":["$","$this","data","options","this","option","setState","toggle","Button","$element","element","extend","isLoading","DEFAULTS","VERSION","loadingText","d","state","$el","val","resetText","addClass","attr","prop","removeClass","removeAttr","changed","$parent","closest","$input","find","toggleClass","hasClass","trigger","old","button","Constructor","fn","Plugin","noConflict","e","on","$btn","target","call","is","preventDefault","first","test","type","jQuery"],"mappings":"CAUE,SAAAA,GAAA,YAqEI,SAAIC,GAAUD,GACd,MAAIE,MAAAA,KAAUD,WACd,GAAIE,GAAUH,EAAAI,MADVF,EAAUD,EAAMC,KAAK,aAGrBC,EAAkB,gBAAXE,IAAgCA,CAEvCA,IAAAA,EAAUH,KAAd,YAAwBA,EACnB,GAAIG,GAAJD,KAAiBE,IAEzB,UAAAD,EAAAH,EAAAK,SAFYF,GAAQH,EAAKI,SAASD,KAtEjC,GAAAG,GAAKC,SAAcC,EAAnBP,GACAC,KAAKD,SAAcQ,EAAAA,GACnBP,KAAKQ,QAAYZ,EAAAW,UAAjBH,EAAAK,SAAAV,GAHFC,KAAAQ,WAAA,EAMAJ,GAAOM,QAAW,QAGhBC,EAAAA,UADFA,YAAA,cAKEP,EAAIQ,UAAOV,SAAX,SAAAW,GACA,GAAIC,GAAO,WACPC,EAAOD,KAAAT,SACPP,EAAOgB,EAAIhB,GAAAA,SAAf,MAAA,OAAIA,EAAOgB,EAAIhB,MAEfe,IAAS,OAEa,MAAlBf,EAAKkB,WAAmBF,EAAIhB,KAAK,YAAagB,EAAIC,MAIpDD,WAAShB,EAAAA,MAAKe,WAAdC,EAAIC,GAAoB,MAAfjB,EAAKe,GAAiBb,KAAKD,QAAQc,GAASf,EAAKe,IAGnDL,eAALK,GACAC,KAAIG,WAAYC,EAFlBJ,EAAAG,SAGWL,GAAKJ,KAAAA,EAATI,GAAoBO,KAAAP,GAAA,IACpBJ,KAALA,YACAM,KAAIM,WAAJ,EACDN,EAAAM,YAAAR,GAAAS,WAAAT,GAAAO,KAAAP,GAAA,KApBLZ,MAAA,IAyBEI,EAAIkB,UAAUnB,OAAd,WACA,GAAIoB,IAAU,EAAVA,EAAUvB,KAAKK,SAASmB,QAAQ,0BAGlC,IAAAD,EAAIE,OAAcpB,CAClB,GAAIoB,GAAON,KAAKd,SAAWqB,KAAA,QACrB,UAAJD,EAAIA,KAAON,SACXI,EAAQG,KAAK,aAAWN,GAAY,GACpCG,EAAKlB,KAAL,WAAuBe,YAAvB,UAHFpB,KAIOK,SAAIoB,SAAY,WACY,YAA5BA,EAAYN,KAAA,UACZd,EAAAA,KAASsB,aAAY3B,KAA1BK,SAAAuB,SAAA,YAAAN,GAAA,GACDtB,KAAAK,SAAAsB,YAAA,WAEDF,EAAIH,KAAJ,UAAoBO,KAAQxB,SAAfuB,SAAA,WAXfN,GAYOG,EAAAI,QAAA,cAEL7B,MAAKK,SAASsB,KAAAA,gBAAd3B,KAAAK,SAAAuB,SAAA,WACD5B,KAAAK,SAAAsB,YAAA,UAuBH/B,IAAAkC,GAAKC,EAAOC,GAAAA,MAGZpC,GAAAqC,GAAAF,OAAAG,EACAtC,EAAAqC,GAAAF,OAAAC,YAAA5B,EAEAR,EAAEqC,GAAGF,OAAOI,WAAa,WAOzB,MADAvC,GAAAqC,GAAAF,OAAAD,EACA9B,MAQMoC,EAAAA,UACAC,GAAA,2BAAA,0BAAA,SAAAD,GACA,GAAIE,GAAA1C,EAAQwC,EAAAG,QAAAf,QAAiBc,OAE9BJ,GAAAM,KAAAF,EAAA,UAEC1C,EAAAwC,EAAAG,QAAAE,GAAA,iDAZNL,EAAAM,iBAQUJ,EAAKG,GAAG,gBAAiBH,EAAKT,QAAQ,SACrCS,EAAKZ,KAAK,gCAAgCiB,QAAQd,QAAQ,YAGlEQ,GAAG,mDAAoD,0BAA2B,SAAUD,GAC3FxC,EAAEwC,EAAEG,QAAQf,QAAQ,QAAQG,YAAY,QAAS,eAAeiB,KAAKR,EAAES,UAG3EC","file":"../../bootstrap/button.js","sourcesContent":["/* ========================================================================\n * Bootstrap: button.js v3.3.7\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    this.$element  = $(element)\n    this.options   = $.extend({}, Button.DEFAULTS, options)\n    this.isLoading = false\n  }\n\n  Button.VERSION  = '3.3.7'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n  Button.prototype.setState = function (state) {\n    var d    = 'disabled'\n    var $el  = this.$element\n    var val  = $el.is('input') ? 'val' : 'html'\n    var data = $el.data()\n\n    state += 'Text'\n\n    if (data.resetText == null) $el.data('resetText', $el[val]())\n\n    // push to event loop to allow forms to submit\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state])\n\n      if (state == 'loadingText') {\n        this.isLoading = true\n        $el.addClass(d).attr(d, d).prop(d, true)\n      } else if (this.isLoading) {\n        this.isLoading = false\n        $el.removeClass(d).removeAttr(d).prop(d, false)\n      }\n    }, this), 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var changed = true\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n    if ($parent.length) {\n      var $input = this.$element.find('input')\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false\n        $parent.find('.active').removeClass('active')\n        this.$element.addClass('active')\n      } else if ($input.prop('type') == 'checkbox') {\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n        this.$element.toggleClass('active')\n      }\n      $input.prop('checked', this.$element.hasClass('active'))\n      if (changed) $input.trigger('change')\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n      this.$element.toggleClass('active')\n    }\n  }\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.button', (data = new Button(this, options)))\n\n      if (option == 'toggle') data.toggle()\n      else if (option) data.setState(option)\n    })\n  }\n\n  var old = $.fn.button\n\n  $.fn.button             = Plugin\n  $.fn.button.Constructor = Button\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old\n    return this\n  }\n\n\n  // BUTTON DATA-API\n  // ===============\n\n  $(document)\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      var $btn = $(e.target).closest('.btn')\n      Plugin.call($btn, 'toggle')\n      if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n        e.preventDefault()\n        // The target component still receive the focus\n        if ($btn.is('input,button')) $btn.trigger('focus')\n        else $btn.find('input:visible,button:visible').first().trigger('focus')\n      }\n    })\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n    })\n\n}(jQuery);\n"]}